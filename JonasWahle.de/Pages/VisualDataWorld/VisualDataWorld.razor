@page "/visual-dataworld"
@inject IApiService _apiService
@inject ISnackbarService _snackbarService


<PageTitle>Visuelle Datenwelt</PageTitle>
<MudStack Spacing="5">
    <MudText Typo="Typo.h3" Align="Align.Center">Visuelle Datenwelt</MudText>

    <MudGrid Spacing="3">
        <MudItem xs="12" md="4">
            <TableCodeInput VisualDataWorldRef="this"
            @bind-IsLoadingData="isLoadingData" />
        </MudItem>

        <MudItem xs="12" md="4">
            <TableCodeExamples />
        </MudItem>

        <MudItem xs="12" md="4">
            <MudStack Row Justify="Justify.FlexEnd">
                <MudButton Color="Color.Tertiary"
                           Disabled="isTestingConnection"
                           Variant="Variant.Filled"
                           OnClick="async () => await TestApiConnectionAsync()">
                    API Verbindung testen
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    <MudExpansionPanels Elevation="3" MultiExpansion>
        <MudExpansionPanel MaxHeight="500" Text="@(tableData?.Title ?? "Tabelle")" Expanded>
            @if (tableData != null)
            {
                <PanelDataTable TableData="tableData" @bind-IsLoadingData="isLoadingData" />
            }
            else
            {
                <MudText Typo="Typo.body1" Align="Align.Center">Keine Daten vorhanden</MudText>
            }
        </MudExpansionPanel>
        <MudExpansionPanel Text="Diagramm" >
            @if (tableData != null)
            {
                <PanelDataChart TableData="tableData" />
            }
            else
            {
                <MudText Typo="Typo.body1" Align="Align.Center">Keine Daten vorhanden</MudText>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudStack>


@code {
    private TableResponse? tableData;
    private bool isLoadingData = false;
    private bool isTestingConnection = false;

    
    private async Task TestApiConnectionAsync()
    {
        isTestingConnection = true;

        try
        {
            bool success = await _apiService.TestConnectionAsync();

            if (success)
            {
                _snackbarService.ShowSuccess("Verbindung erfolgreich!");
            }
        }
        catch (Exception ex)
        {
            _snackbarService.ShowError(ex.Message);
        }
        finally
        {
            isTestingConnection = false;
        }
    }

    public async Task GetApiDataAsync(string tableCode)
    {
        try
        {
            TableRequest requestTableDataModel = new() { TableCode = tableCode };
            isLoadingData = true;

            StateHasChanged();

            // Fetch new data
            tableData = await _apiService.RequestTableDataAsync(requestTableDataModel);

            _snackbarService.ShowSuccess("Daten erfolgreich aktualisiert!");
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Bad Request"))
            {
                _snackbarService.ShowInfo("Leider keine Daten gefunden 😕\n\nAnderen Tabellen-Code versuchen?");
            }
            else
            {
                _snackbarService.ShowError(ex.Message);
            }
        }
        finally
        {
            isLoadingData = false;

            StateHasChanged();
        }
    }
}