@inject ISnackbarService _snackbarService


<MudSelect @bind-Value="chartType" Label="Diagramm-Typ auswählen" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Tertiary">
    <MudSelectItem Value="ChartType.Line">Linien</MudSelectItem>
    <MudSelectItem Value="ChartType.Bar">Balken</MudSelectItem>
    <MudSelectItem Value="ChartType.Pie">Kuchen</MudSelectItem>
    <MudSelectItem Value="ChartType.Donut">Donut</MudSelectItem>
</MudSelect>

@if (chartType.Equals(ChartType.Line))
{
    <MudChart ChartType="@chartType"
    ChartSeries="@chartData"
    XAxisLabels="@chartXAxisLabels"
    Width="100%"
    Height="100%"
    ChartOptions="chartOptions"
    AxisChartOptions="chartAxisOptions"
    LegendPosition="Position.Top"
    CanHideSeries />
}
else if (chartType.Equals(ChartType.Bar))
{
    <MudChart ChartType="@chartType"
    ChartSeries="@chartData"
    XAxisLabels="@chartXAxisLabels"
    Width="100%"
    Height="100%"
    ChartOptions="chartOptions"
    AxisChartOptions="chartAxisOptions"
    LegendPosition="Position.Top" />
}
else if (chartType.Equals(ChartType.Pie))
{
    <MudChart ChartType="ChartType.Pie"
    InputData="@pieDonutChartData"
    InputLabels="@chartXAxisLabels"
    Height="500px"
    ChartOptions="chartOptions"
    AxisChartOptions="chartAxisOptions"
    LegendPosition="Position.Top" />
}
else if (chartType.Equals(ChartType.Donut))
{
    <MudChart ChartType="ChartType.Donut"
    InputData="@pieDonutChartData"
    InputLabels="@chartXAxisLabels"
    Height="500px"
    ChartOptions="chartOptions"
    AxisChartOptions="chartAxisOptions"
    LegendPosition="Position.Top">
        @* <CustomGraphics>
            <text class="donut-inner-text text-break" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black">
                @(tableData?.Title ?? string.Empty)
            </text>
        </CustomGraphics> *@
    </MudChart>
}

@code {
    [Parameter]
    public required TableResponse TableData { get; set; }

    private ChartType chartType = ChartType.Line;
    private List<ChartSeries> chartData = new();
    private double[] pieDonutChartData = [];
    private List<string> tableHeaders = new();
    private string[] chartXAxisLabels = Array.Empty<string>();
    private ChartOptions chartOptions = new() { InterpolationOption = InterpolationOption.NaturalSpline };
    private AxisChartOptions chartAxisOptions = new() { MatchBoundsToSize = true, XAxisLabelRotation = 45 };


    protected override void OnParametersSet()
    {
        try
        {
            if (TableData?.Data?.Count > 0)
            {
                // Generate table headers from columns
                tableHeaders = new List<string> { "Year" }
                    .Concat(TableData.Columns.Select(c => c.Name))
                    .ToList();

                // Prepare chart data
                var firstDataPoint = TableData.Data.First();
                if (firstDataPoint.TryGetValue("Year", out var yearValue))
                {
                    // X-Axis labels (years)
                    chartXAxisLabels = TableData.Data
                        .Select(d => d["Year"].ToString())
                        .ToArray();

                    // Chart series from columns
                    chartData = TableData.Columns.Select(col =>
                    {
                        ChartSeries series = new()
                            {
                                Name = $"{col.Name} ({col.Unit})",
                                Data = TableData.Data.Select(d =>
                                {
                                    if (d.TryGetValue(col.Name, out var value))
                                    {
                                        if (value is JsonElement element && element.ValueKind == JsonValueKind.Number)
                                        {
                                            return element.GetDouble();
                                        }
                                        if (double.TryParse(value.ToString(), out double num))
                                        {
                                            return num;
                                        }
                                    }
                                    return 0;
                                }).ToArray()
                            };
                        series.ShowDataMarkers = true;

                        // Get data points for pie chart
                        pieDonutChartData = series.Data;

                        return series;
                    }).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            _snackbarService.ShowWarning($"Diagramm konnte nicht erstellt werden:\n{ex.Message}");
        }
        
    }

}
