@implements IDisposable
@inject IJSRuntime _jsRuntime
@inject ISnackbarService _snackbarService


<MudPaper Elevation="3" Class="p-3">
    <form id="contact-form" action="https://api.web3forms.com/submit" method="POST">
        <MudStack>
            <input type="hidden" name="access_key" value="0160a216-bd3d-4c66-a072-ee397ee03c6e">

            <MudInputLabel Variant="Variant.Text" ForId="name">Name</MudInputLabel>
            <MudInput T="string" InputType="InputType.Text" InputId="name" name="name" Variant="Variant.Outlined" Required />

            <MudInputLabel Variant="Variant.Text" ForId="email">Email</MudInputLabel>
            <MudInput T="string" InputType="InputType.Email" InputId="email" name="email" Variant="Variant.Outlined" Required />

            <MudInputLabel Variant="Variant.Text" ForId="message">Nachricht</MudInputLabel>
            <MudInput T="string" InputType="InputType.Text" InputId="message" name="message" Variant="Variant.Outlined" Required Lines="3" />

            <MudGrid Spacing="5">
                <MudItem xs="12" sm="6" Class="d-flex justify-space-around align-items-stretch">
                    <!-- hCaptcha -->
                    <div class="h-captcha" data-sitekey="50b2fe65-b00b-4b9e-ad62-3ba471098be2" data-captcha="true"></div>
                </MudItem>
                <MudItem xs="12" sm="6" Class="d-flex justify-space-around align-items-stretch">
                    <!-- Privacy policy -->
                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                        <MudCheckBox @bind-Value="acceptPrivacyPolicy" Required RequiredError="Benötigt" Size="Size.Large" id="privacyPolicyCheckbox" Color="Color.Tertiary"></MudCheckBox>
                        <MudInputLabel Variant="Variant.Text" ForId="privacyPolicyCheckbox">
                            Ich habe die 
                            <MudLink Href="/datenschutz" Target="_blank" Color="Color.Info">
                                Datenschutzerklärung
                            </MudLink>
                            gelesen und akzeptiert.
                        </MudInputLabel>
                    </MudStack>
                </MudItem>
            </MudGrid>
            
            <!-- Honeypot -->
            <input type="checkbox" name="botcheck" class="hidden" style="display: none;">

            <!-- Confirmation -->
            <input type="hidden" name="redirect" value="https://jonaswahle.de/contact">

            <MudButton Disabled="acceptPrivacyPolicy == false" ButtonType="ButtonType.Submit" Size="Size.Large" Color="Color.Tertiary" Variant="Variant.Filled">
                Senden
            </MudButton>
        </MudStack>
    </form>

    <!-- For hCaptcha -->
    <script src="https://web3forms.com/client/script.js" async defer></script>
    <script>
        let dotNetHelper = null;

        function setDotNetReference(helper) {
        dotNetHelper = helper;
        }

        const form = document.getElementById('contact-form');

        form.addEventListener('submit', function (e) {
            const hCaptcha = form.querySelector('textarea[name=h-captcha-response]').value;

            if (!hCaptcha) {
                e.preventDefault();

                if (dotNetHelper) {
                    dotNetHelper.invokeMethod('ShowCaptchaWarning');
                } 
                else {
                    alert("Bitte Captcha-Feld ausfüllen.");
                }
            } 
            else{
                if (dotNetHelper) {
                    dotNetHelper.invokeMethod('ShowCaptchaSuccess');
                }
            }
        });
    </script>
</MudPaper>


@code {
    private DotNetObjectReference<ContactForm>? dotNetRef;
    private bool acceptPrivacyPolicy = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Get and set obj ref
                dotNetRef = DotNetObjectReference.Create(this);
                await _jsRuntime.InvokeVoidAsync("setDotNetReference", dotNetRef);
                // Reload the captcha
                await _jsRuntime.InvokeVoidAsync("reloadHCaptcha");
            }
            catch (Exception ex)
            {
                _snackbarService.ShowError(ex.Message);
            }
            
        }
    }

    [JSInvokable]
    public void ShowCaptchaWarning()
    {
        _snackbarService.ShowWarning("Bitte Captcha-Feld ausfüllen.");
    }

    [JSInvokable]
    public void ShowCaptchaSuccess()
    {
        _snackbarService.ShowSuccess("Nachricht erfolgreich versendet!");
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}