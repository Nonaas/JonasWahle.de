@using System.Text.Json
@using System.Text.Json.Nodes
@inject ISnackbarService _snackbarService
@inject IClipboardService _clipboardService


<MudPaper Class="pa-8 ma-1" Elevation="3">
    <MudText Typo="Typo.h4" Class="mb-4">JSON zu C# Model Generator</MudText>

    <MudTextField T="string" Immediate
                  Label="JSON-Rohdaten"
                  @bind-Value="inputJson"
                  Lines="12"
                  Variant="Variant.Outlined"
                  Placeholder="@("{ \"name\": \"John Doe\", \"age\": 42 }")"
                  FullWidth />

    <MudStack Row Spacing="2" Justify="Justify.Center" Class="w-100 pb-2 pt-1">
        <MudButton Disabled="string.IsNullOrEmpty(inputJson)" Color="Color.Success" Variant="Variant.Filled" OnClick="GenerateCSharpModel">C# Model erzeugen</MudButton>
        <MudButton Disabled="string.IsNullOrEmpty(inputJson) && string.IsNullOrEmpty(csharpModel)" Color="Color.Secondary" Variant="Variant.Filled" OnClick="ClearJson">Zurück&shy;setzen</MudButton>
        <MudFileUpload Accept=".json" T="IBrowserFile" FilesChanged="OnUploadFileChanged">
            <ActivatorContent>
                <MudButton Color="Color.Tertiary" Variant="Variant.Filled">JSON Datei hochladen</MudButton>
            </ActivatorContent>
        </MudFileUpload>
    </MudStack>

    <MudTextField T="string" Immediate
                  Label="C# Modell"
                  Value="@csharpModel"
                  Lines="12"
                  ReadOnly
                  FullWidth
                  Variant="Variant.Filled" />

    <MudStack Row Justify="Justify.Center" Class="w-100 pt-2">
        <MudButton Disabled="string.IsNullOrEmpty(csharpModel)" Color="Color.Tertiary" Variant="Variant.Filled" OnClick="CopyModelToClipboard">Model kopieren</MudButton>
    </MudStack>
</MudPaper>


@code {
    private string inputJson = string.Empty;
    private string csharpModel = string.Empty;


    private void GenerateCSharpModel()
    {
        try
        {
            var jsonNode = JsonNode.Parse(inputJson);
            csharpModel = GenerateCSharpFromJson(jsonNode, "Root");
            _snackbarService.ShowSuccess("C# Modell generiert!");
        }
        catch (Exception ex)
        {
            _snackbarService.ShowError($"Ungültiges JSON: {ex.Message}");
        }
    }

    private void ClearJson()
    {
        inputJson = string.Empty;
        csharpModel = string.Empty;
    }

    private async Task OnUploadFileChanged(IBrowserFile file)
    {
        try
        {
            using var reader = new StreamReader(file.OpenReadStream());
            inputJson = await reader.ReadToEndAsync();
            GenerateCSharpModel();
            _snackbarService.ShowSuccess("Hochladen erfolgreich!");
        }
        catch (Exception ex)
        {
            _snackbarService.ShowError(ex.Message);
        }
    }

    private async Task CopyModelToClipboard()
    {
        try
        {
            await _clipboardService.CopyToClipboard(csharpModel);
            _snackbarService.ShowSuccess("Kopieren erfolgreich!");
        }
        catch (Exception ex)
        {
            _snackbarService.ShowError(ex.Message);
        }
    }

    private string GenerateCSharpFromJson(JsonNode? node, string className)
    {
        if (node == null) return string.Empty;

        var sb = new System.Text.StringBuilder();
        sb.AppendLine($"public class {className}");
        sb.AppendLine("{");

        if (node is JsonObject obj)
        {
            foreach (var prop in obj)
            {
                string propertyName = Extensions.ToPascalCase(prop.Key);
                string propertyType = GetCSharpType(prop.Value);
                sb.AppendLine($"    public {propertyType} {propertyName} {{ get; set; }}");
            }
        }

        sb.AppendLine("}");
        return sb.ToString();
    }

    private string GetCSharpType(JsonNode? node)
    {
        switch (node)
        {
            case JsonValue v when v.TryGetValue(out string? _):
                return "string";

            case JsonValue v when v.TryGetValue(out int _):
                return "int";

            case JsonValue v when v.TryGetValue(out double _):
                return "double";

            case JsonValue v when v.TryGetValue(out bool _):
                return "bool";

            case JsonArray array:
                if (array.Count == 0)
                    return "List<object>";

                var elementTypes = array
                    .Select(GetCSharpType)
                    .Distinct()
                    .ToList();

                var listType = elementTypes.Count == 1 ? elementTypes[0] : "object";
                return $"List<{listType}>";

            case JsonObject obj:
                if (obj.Count == 0)
                    return "Dictionary<string, object>";

                var valueTypes = obj
                    .Select(kvp => kvp.Value)
                    .Where(v => v is JsonValue)
                    .Select(GetCSharpType)
                    .Distinct()
                    .ToList();

                if (valueTypes.Count == 1)
                {
                    return $"Dictionary<string, {valueTypes[0]}>";
                }

                return "object";

            default:
                return "string";
        }
    }
}