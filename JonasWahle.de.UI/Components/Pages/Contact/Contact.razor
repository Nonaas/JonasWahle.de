@page "/kontakt"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@using BlazorCaptcha
@using JonasWahle.de.Domain.Models
@using JonasWahle.de.UI.Interfaces
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbarService SnackbarService
<PageTitle>Kontakt - Jonas Wahle</PageTitle>

<MudStack Spacing="4" Class="mb-3">
    <MudStack Spacing="0">
        <MudText Typo="Typo.h4">Kontakt</MudText>
    </MudStack>

    <EditForm Model="@_sendMessageDto" OnValidSubmit="async (editContext) => await OnValidSubmitAsync(editContext)">
        <DataAnnotationsValidator />

        <MudTextField Variant="Variant.Outlined" Label="Name" Class="mb-3" HelperText="Namen eingeben" data-bwignore data-1p-ignore
            @bind-Value="_sendMessageDto.Name" For="@(() => _sendMessageDto.Name)" InputType="InputType.Text" />

        <MudTextField Variant="Variant.Outlined" Label="Email" Class="mb-3" HelperText="Email eingeben" data-bwignore data-1p-ignore
            @bind-Value="_sendMessageDto.Email" For="@(() => _sendMessageDto.Email)" InputType="InputType.Email" />

        <MudTextField Variant="Variant.Outlined" Label="Nachricht" Class="mb-3" HelperText="Nachricht eingeben" data-bwignore data-1p-ignore
            @bind-Value="_sendMessageDto.Message" For="@(() => _sendMessageDto.Message)" InputType="InputType.Text" Lines="3" />

        <MudStack Row AlignItems="AlignItems.Center" Spacing="0" Class="mb-3">
            <MudCheckBox T="bool" id="privacyPolicyCheckbox" Color="Color.Primary" Disabled="@_isSubmitting" Required RequiredError="Bitte akzeptieren Sie die Datenschutzerklärung" />
            <MudInputLabel Variant="Variant.Text" ForId="privacyPolicyCheckbox" Class="text-break">
                <MudLink Href="/datenschutz" Target="_blank" Color="Color.Secondary">Datenschutzerklärung</MudLink>
                akzeptiert
            </MudInputLabel>
        </MudStack>

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" Class="mt-3" Style="min-width: 150px;" Disabled="@_isSubmitting">
            @if (_isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
                <MudText Color="Color.Primary" Class="ms-2">Senden ...</MudText>
            }
            else
            {
                <MudText>Senden</MudText>
            }
        </MudButton>
    </EditForm>

</MudStack>

@code{
    private SendMessageDto _sendMessageDto = new();
    private bool _isSubmitting = false;


    private async Task OnValidSubmitAsync(EditContext context)
    {
        if (_isSubmitting) return;

        _isSubmitting = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            using HttpClient httpClient = HttpClientFactory.CreateClient();

            string json = JsonSerializer.Serialize(_sendMessageDto);
            StringContent content = new (json, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await httpClient.PostAsync($"{NavigationManager.BaseUri}api/contact", content);

            if (response.IsSuccessStatusCode)
            {
                SnackbarService.ShowSuccess("Nachricht erfolgreich gesendet!");
                _sendMessageDto = new();
            }
            else
            {
                SnackbarService.ShowError("Fehler beim Senden der Nachricht. Bitte versuchen Sie es erneut.");
            }
        }
        catch (Exception ex)
        {
            SnackbarService.ShowError($"Ein unerwarteter Fehler ist aufgetreten: {ex.Message}");
        }
        finally
        {
            _isSubmitting = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
